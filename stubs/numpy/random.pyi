# pylint: skip-file

from collections.abc import Sequence
from typing import TypeVar, TypeVarTuple, overload

from numpy import float64, int64, ndarray

A = TypeVar("A")
Shape = TypeVarTuple("Shape")
Dim = TypeVar("Dim", bound=int)
Int = TypeVar("Int", bound=int)
Float = TypeVar("Float", bound=float)

def permutation(x: ndarray[*Shape, A]) -> ndarray[*Shape, A]: ...
def random(shape: tuple[*Shape], dtype: type[Float] = float64) -> ndarray[*Shape, Float]: ...
def randint(low: int, high: int, size: Dim | None = None, dtype: type[Int] = int64) -> ndarray[Dim, Int]: ...
def seed(a: int) -> None: ...
def default_rng(seed: int | None = None) -> Generator: ...
def choice(a: Sequence[A], size: Dim) -> ndarray[Dim, A]: ...

class Generator:
    @overload
    def random(self, size: tuple[*Shape], dtype: type[Float] = float64) -> ndarray[*Shape, Float]: ...
    @overload
    def random(self, size: Dim, dtype: type[Float] = float64) -> ndarray[Dim, Float]: ...
    @overload
    def integers(self, low: int, high: int, size: Dim, dtype: type[Int] = int64) -> ndarray[Dim, Int]: ...
    @overload
    def integers(self, low: int, high: int, dtype: type[Int] = int64) -> ndarray[Int]: ...
    @overload
    def choice(self, a: Sequence[A], p: Sequence[float] | None = None) -> A: ...
    @overload
    def choice(
        self, a: Sequence[A], size: Int, replace: bool = True, p: Sequence[float] | None = None
    ) -> ndarray[Int, A]: ...
    def permuted(self, a: Sequence[A]) -> Sequence[A]: ...
